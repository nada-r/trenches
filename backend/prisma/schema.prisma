// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

/// Always after the prisma-client-js generator
generator json {
  provider = "prisma-json-types-generator"
}

/// generate types for front
generator zod {
  provider                         = "zod-prisma-types"
  output                           = "../../front/src/models"
  useMultipleFiles                 = false // default is false
  writeBarrelFiles                 = false // default is true
  createInputTypes                 = false // default is true
  createModelTypes                 = true // default is true
  addInputTypeValidation           = false // default is true
  addIncludeType                   = false // default is true
  addSelectType                    = false // default is true
  validateWhereUniqueInput         = false // default is true
  createOptionalDefaultValuesTypes = false // default is false
  createRelationValuesTypes        = false // default is false
  createPartialTypes               = false // default is false
  useDefaultValidators             = true // default is true
  coerceDate                       = true // default is true
  writeNullishInModelTypes         = true // default is false
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// generate types for front

model Caller {
  id                   Int                    @id @default(autoincrement())
  name                 String
  image                String?
  telegramId           String                 @unique
  /// [CallerData]
  data                 Json                   @default("{}") /// @zod.custom.use(z.object({ power: z.number() , rank: z.number()}))
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  calls                Call[]
  TournamenCallerPower TournamenCallerPower[]
}

model Call {
  id           Int      @id @default(autoincrement())
  tokenAddress String
  startFDV     Float
  highestFDV   Float
  caller       Caller   @relation(fields: [callerId], references: [id])
  callerId     Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  /// [CallData | null]]
  data         Json?
}

model Claim {
  id           Int      @id @default(autoincrement())
  walletPubkey String   @unique
  /// [ClaimMetadata]
  portfolio    Json /// @zod.custom.use(z.array(z.object({ callerId: z.number(), balance: z.number() })))
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Player {
  id           Int      @id @default(autoincrement())
  walletPubkey String   @unique
  /// [ProfileMetadata]
  data         Json /// @zod.custom.use(z.object({ favorites: z.array(z.number()) }))
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Token {
  id        Int      @id @default(autoincrement())
  address   String   @unique
  name      String
  ticker    String
  url       String
  image_uri String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  /// [TokenData]
  data      Json     @default("{}")
}

enum TournamentStatus {
  HIDDEN
  UPCOMING
  STARTED
  COMPLETED
  CANCELLED
}

model Tournament {
  id             Int                       @id @default(autoincrement())
  name           String
  status         TournamentStatus          @default(HIDDEN)
  startedAt      DateTime?
  /// [TournamentMetadata]
  metadata       Json /// @zod.custom.use(z.object({ openDuration: z.number(), endDuration: z.number(), prize: z.number(), supplyBurn: z.number() }))
  createdAt      DateTime                  @default(now())
  updatedAt      DateTime                  @updatedAt
  participations TournamentParticipation[]
  callerPower    TournamenCallerPower[]
}

model TournamentParticipation {
  id           Int        @id @default(autoincrement())
  walletPubkey String
  callers      String[]
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  tournament   Tournament @relation(fields: [tournamentId], references: [id])
  tournamentId Int
  /// [TournamentParticipationData]
  data         Json       @default("{}") /// @zod.custom.use(z.object({ score: z.number().optional(), rank: z.number().optional() }))

  @@unique(name: "unique_participation", [walletPubkey, tournamentId])
}

model TournamenCallerPower {
  id           Int        @id @default(autoincrement())
  callerId     Int
  power        Float
  tournamentId Int
  updatedAt    DateTime   @default(now())
  caller       Caller     @relation(fields: [callerId], references: [id])
  tournament   Tournament @relation(fields: [tournamentId], references: [id])

  @@unique(name: "power_by_tournament", [callerId, tournamentId])
}
