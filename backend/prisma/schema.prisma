// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

/// Always after the prisma-client-js generator
generator json {
  provider = "prisma-json-types-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Card { //to rename to Caller, add
  id                       Int                       @id @default(autoincrement())
  name                     String
  price                    Int
  image                    String
  createdAt                DateTime                  @default(now())
  updatedAt                DateTime                  @updatedAt
  power                    Power                     @relation(fields: [powerId], references: [id]) //to replace by value in Power
  powerId                  Int                       @unique
  tournamentParticipations TournamentParticipation[]
}

model Power { //to delete
  id        Int      @id @default(autoincrement())
  name      String
  value     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  card      Card?
}

model User { //to delete
  id           Int      @id @default(autoincrement())
  name         String
  walletString String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Test {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Tournament {
  id             Int                       @id @default(autoincrement())
  name           String
  status         TournamentStatus          @default(HIDDEN)
  startedAt      DateTime?
  /// [TournamentMetadata]
  metadata       Json
  createdAt      DateTime                  @default(now())
  updatedAt      DateTime                  @updatedAt
  participations TournamentParticipation[]
}

enum TournamentStatus {
  HIDDEN
  UPCOMING
  STARTED
  COMPLETED
  CANCELLED
}

model TournamentParticipation {
  id           Int        @id @default(autoincrement())
  walletString String
  cardIds      Card[]
  tournament   Tournament @relation(fields: [tournamentId], references: [id])
  tournamentId Int
}
