// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

/// Always after the prisma-client-js generator
generator json {
  provider = "prisma-json-types-generator"
}

/// generate types for front
generator zod {
  provider                         = "zod-prisma-types"
  output                           = "../../front/src/models"
  useMultipleFiles                 = false // default is false
  writeBarrelFiles                 = false // default is true
  createInputTypes                 = false // default is true
  createModelTypes                 = true // default is true
  addInputTypeValidation           = false // default is true
  addIncludeType                   = false // default is true
  addSelectType                    = false // default is true
  validateWhereUniqueInput         = false // default is true
  createOptionalDefaultValuesTypes = false // default is false
  createRelationValuesTypes        = false // default is false
  createPartialTypes               = false // default is false
  useDefaultValidators             = true // default is true
  coerceDate                       = true // default is true
  writeNullishInModelTypes         = flase // default is false
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Card {
  id        Int      @id @default(autoincrement())
  name      String
  price     Int
  image     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  power     Power    @relation(fields: [powerId], references: [id]) //to replace by value in Power
  powerId   Int      @unique
}

model Power {
  id        Int      @id @default(autoincrement())
  name      String
  value     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  card      Card?
}

model User {
  id           Int      @id @default(autoincrement())
  name         String
  walletString String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Test {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Tournament {
  id             Int                       @id @default(autoincrement())
  name           String
  status         TournamentStatus          @default(HIDDEN)
  startedAt      DateTime?
  /// [TournamentMetadata]
  metadata       Json /// @zod.custom.use(z.object({ openDuration: z.number(), endDuration: z.number(), prize: z.number(), supplyBurn: z.number() }))
  createdAt      DateTime                  @default(now())
  updatedAt      DateTime                  @updatedAt
  participations TournamentParticipation[]
}

enum TournamentStatus {
  HIDDEN
  UPCOMING
  STARTED
  COMPLETED
  CANCELLED
}

model TournamentParticipation {
  id           Int        @id @default(autoincrement())
  walletPubkey String
  callers      String[]
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  tournament   Tournament @relation(fields: [tournamentId], references: [id])
  tournamentId Int
}
